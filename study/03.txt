언패킹의 개념 => 시퀀스 자료형 
(리스트, 튜플, 문자열 등)에서
여러개의 값을 개별 변수에 분리하여 할당하는 기능
----------------------------------------------------
언더스코어란 
- 언더스코어(_) 는 반복 변수의 값이 
필요하지 않을 때 사용

ex ) for _ in range(5):
        print("hello")
----------------------------------------------------
예외처리의 이해
- 코드 실행 중 예기치 않은 오류가 발생할 경우에
대비하는 기능 필요

예외 및 예외 처리
- 예기치 않은 오류를 예외 (execption)로 정의
- 예외 처리 (exception handling)는 프로그램이 
비정상적 종료를 방지
- try-except 문과 finally 블록을 사용

try-except 문 )

오류가 발생할 수 있는 부분에 코드 블록을 감싸서, 오류가 발생했을 때
프로그램이 강제 종료되지 않도록 처리

finally )
예외 발생 여부와 관계없이 반드시 실행되는 코드 블록

----------------------------------------------------
- 파이썬은 절차적 프로그래밍, 객체지향 프로그래밍 외 
함수형 프로그래밍 방식 지원

- 데이터 변경을 최소화하고, 순수 함수를 활용하여 부작용을 줄이는 것을 목표
- 순수함수 : 같은 입력에 대해 항상 같은 출력을 반환하는 함수
- 부작용 : 함수가 단순히 값을 계산하는 것 외에 외부에 영향을 미치는 모든 행위

----------------------------------------------------
람다 함수 : 이름이 없는 익명 함수
- 한 줄의 표현식으로 작성할 수 있는 간결한 함수
- 즉시 사용할 수 있는 간결한 연산을 수행할 때 적합

형식 : lambda 매개변수: 표현식
특징 : 단 하나의 표현식만 허용, 표현식의 결과는 자동으로 함수의 반환값이 되므로
retrun 키워드 사용하지 않음